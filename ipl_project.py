# -*- coding: utf-8 -*-
"""IPL_PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FzRzpTgqBcJuEHdMf0Otr7_KIlMi2rp1
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

matches= pd.read_csv('/content/matches.csv')
deliveries = pd.read_csv('/content/deliveries.csv')

matches.head()

deliveries.head()

print(matches.isnull().sum())

print(matches.info())

print(deliveries.info())

print(deliveries.isnull().sum())

matches_per_season = matches['season'].value_counts().sort_index()
plt.figure(figsize=(10, 6))
ax=sns.barplot(x=matches_per_season.index, y=matches_per_season.values, palette='coolwarm')
for index, value in enumerate(matches_per_season.values):
    ax.text(index, value + 2, str(value), ha='center', fontsize=12, fontweight='bold')
plt.title('total number of Matches per Season')
plt.xlabel('Season')
plt.ylabel('Total Matches')
plt.xticks(rotation=45)
plt.show()

team_wins = matches['winner'].value_counts()
plt.figure(figsize=(12, 6))
ax=sns.barplot(y=team_wins.index, x=team_wins.values, palette='viridis')
plt.title('Most Successful IPL Teams')
plt.xlabel('Total Wins')
plt.ylabel('Teams')
plt.show()

top_scorers = deliveries.groupby('batter')['batsman_runs'].sum().sort_values(ascending=False).head(10)
plt.figure(figsize=(12, 6))
sns.barplot(y=top_scorers.index, x=top_scorers.values, palette='magma')
plt.title('Top 10 Run Scorers in IPL')
plt.xlabel('Total Runs')
plt.ylabel('Batsman')
plt.show()

top_wicket_takers = deliveries[deliveries['dismissal_kind'].notnull() &
(deliveries['dismissal_kind']!='run out')].groupby('bowler')['player_dismissed'].count().sort_values(ascending=False).head(10)
plt.figure(figsize=(12, 6))
sns.barplot(y=top_wicket_takers.index, x=top_wicket_takers.values, palette='rocket')
plt.title('Top 10 Wicket Takers in IPL')
plt.xlabel('Total Wickets')
plt.ylabel('Bowler')
plt.show()

toss_decisions = matches['toss_decision'].value_counts()
plt.figure(figsize=(8, 5))
sns.barplot(x=toss_decisions.index, y=toss_decisions.values, palette='Set2')
plt.title('Toss Decisions')
plt.xlabel('Decision')
plt.ylabel('Count')
plt.show()

venue_wins = matches['venue'].value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(y=venue_wins.index, x=venue_wins.values, palette='cividis')
plt.title('Top 10 Venues by Matches Hosted')
plt.xlabel('Total Matches')
plt.ylabel('Venue')
plt.show()

team1 = "Mumbai Indians"
team2 = "Chennai Super Kings"
head_to_head = matches[((matches['team1'] == team1) & (matches['team2'] == team2)) | ((matches['team1'] == team2) & (matches['team2'] == team1))]  # Changed to | (or)
team1_wins = (head_to_head['winner'] == team1).sum()
team2_wins = (head_to_head['winner'] == team2).sum()
plt.figure(figsize=(8,5))
sns.barplot(x=[team1, team2], y=[team1_wins, team2_wins], palette=['blue', 'yellow'])
plt.title(f"Head-to-Head Wins: {team1} vs {team2}")
plt.ylabel("Wins")
plt.show()

toss_win_impact = matches[matches['toss_winner'] == matches['winner']].shape[0] / matches.shape[0] * 100
print(f"Toss winner also won the match in {toss_win_impact:.2f}% of matches")

print(matches[['result', 'result_margin', 'target_runs']].head())

batting_first_wins = matches[matches['result'] == 'runs'].shape[0]
chasing_wins = matches[matches['result'] == 'wickets'].shape[0]
total_decided_matches = batting_first_wins + chasing_wins
batting_first_win_pct = (batting_first_wins / total_decided_matches) * 100
chasing_win_pct = (chasing_wins / total_decided_matches) * 100
print(f"Winning % when Batting First: {batting_first_win_pct:.2f}%")
print(f"Winning % when Chasing: {chasing_win_pct:.2f}%")
plt.figure(figsize=(7,5))
sns.barplot(x=["Batting First", "Chasing"], y=[batting_first_win_pct, chasing_win_pct], palette=['orange', 'green'])
plt.title("Winning % When Batting First vs Chasing")
plt.ylabel("Winning Percentage")
plt.show()

top_batsmen = deliveries.groupby('batter')['batsman_runs'].sum().sort_values(ascending=False).head(10).index
batsmen_impact = deliveries[deliveries['batter'].isin(top_batsmen)].groupby('batter')['match_id'].nunique()
plt.figure(figsize=(12,6))
sns.barplot(y=batsmen_impact.index, x=batsmen_impact.values, palette='plasma')
plt.title("Impact of Top Batsmen on Wins\Matches Where They Top-Scored")
plt.xlabel("Matches Won")
plt.ylabel("Batsman")
plt.show()

top_bowlers = deliveries[deliveries['dismissal_kind'].notnull() &(deliveries['dismissal_kind'] != 'run out')].groupby('bowler')['player_dismissed'].count().sort_values(ascending=False).head(10).index
bowlers_impact = deliveries[deliveries['bowler'].isin(top_bowlers)].groupby('bowler')['match_id'].nunique()
plt.figure(figsize=(12,6))
sns.barplot(y=bowlers_impact.index, x=bowlers_impact.values, palette='viridis')
plt.title("Impact of Top Bowlers on Wins")
plt.xlabel("Matches Won")
plt.ylabel("Bowler")
plt.show()

!pip install streamlit pyngrok

!ngrok authtoken 2uqwncS5Ok8WDKBPaOi7xJ2rrOp_5pw3a6wVz9wzRVsABA6Ex

!nano ipl_dashboard.py

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load datasets
@st.cache_data
def load_data():
    matches = pd.read_csv("matches.csv")
    deliveries = pd.read_csv("deliveries.csv")
    return matches, deliveries

matches, deliveries = load_data()

# Sidebar Filters
st.sidebar.header("Filters")
season = st.sidebar.selectbox("Select Season", matches["season"].unique())

# Team selection (Ensuring logical separation)
selected_team = st.sidebar.selectbox("Select Team for Stats", matches["team1"].unique())
team_1 = st.sidebar.selectbox("Select Team 1 for Head-to-Head", matches["team1"].unique())
team_2 = st.sidebar.selectbox("Select Team 2 for Head-to-Head", matches["team2"].unique())

# **Top Run Scorers Calculation**
# Filter deliveries data for the selected season
season_matches = matches[matches["season"] == season]
season_match_ids = season_matches["id"]

filtered_deliveries = deliveries[deliveries["match_id"].isin(season_match_ids)]
filtered_deliveries = filtered_deliveries[filtered_deliveries["batting_team"] == selected_team]

# Calculate top scorers
top_scorers = filtered_deliveries.groupby("batter")["batsman_runs"].sum().reset_index()
top_scorers = top_scorers.sort_values(by="batsman_runs", ascending=False).head(10)

# **Plot: Top Run Scorers**
st.subheader(f"Top Run Scorers for {selected_team} in {season}")
plt.figure(figsize=(10, 5))
sns.barplot(y=top_scorers["batter"], x=top_scorers["batsman_runs"], palette="magma")
plt.xlabel("Total Runs")
plt.ylabel("Batsman")
st.pyplot(plt)

# **Head-to-Head Team Comparison**
st.subheader("\U0001F3CFr Head-to-Head Team Comparison")

# Filter matches for selected teams and season
head_to_head_df = matches[
    (matches["season"] == season) &
    ((matches["team1"] == team_1) & (matches["team2"] == team_2) |
     (matches["team1"] == team_2) & (matches["team2"] == team_1))
]

# Calculate head-to-head wins
head_to_head_summary = head_to_head_df["winner"].value_counts().reset_index()
head_to_head_summary.columns = ["Team", "Wins"]

# **Plot: Head-to-Head Wins**
fig, ax = plt.subplots()
sns.barplot(x=head_to_head_summary["Team"], y=head_to_head_summary["Wins"], palette="viridis", ax=ax)
plt.xlabel("Team")
plt.ylabel("Total Wins")
st.pyplot(fig)

!streamlit run app.py &>/dev/null &

from pyngrok import ngrok

# Kill any existing ngrok processes before starting a new one
ngrok.kill()

# Check for existing tunnels and disconnect them
for tunnel in ngrok.get_tunnels():
    ngrok.disconnect(tunnel.public_url)

# Start a new ngrok tunnel
tunnel = ngrok.connect(8501, "http")
print(f"ðŸš€ Access your IPL Dashboard here: {tunnel.public_url}")